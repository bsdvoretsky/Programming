(load "unit-test.scm")

(define (ref x . xs)
  (cond ((= (length xs) 1)
         (cond ((vector? x)
                (and (integer? (car xs)) (< (car xs) (vector-length x))
                     (>= (car xs) 0) (vector-ref x (car xs))))
               ((list? x)
                (and (integer? (car xs)) (< (car xs) (length x))
                     (>= (car xs) 0) (vector-ref (list->vector x) (car xs))))
               ((string? x)
                (and (integer? (car xs)) (< (car xs) (length (string->list x)))
                     (>= (car xs) 0) (vector-ref (list->vector (string->list x)) (car xs))))))
        ((= (length xs) 2)
         (cond ((vector? x)
                (and (integer? (car xs)) (<= (car xs) (vector-length x))
                     (>= (car xs) 0) (list->vector (append (reverse (list-tail (reverse (vector->list x))
                                                        (- (vector-length x) (car xs)))) (list (cadr xs))
                                                                                        (list-tail (vector->list x) (car xs))))))
               ((list? x)
                (and (integer? (car xs)) (<= (car xs) (length x))
                     (>= (car xs) 0) (append (reverse (list-tail (reverse x)
                                                        (- (length x) (car xs)))) (list (cadr xs))
                                                                                        (list-tail x (car xs)))))
               ((string? x)
                (and (integer? (car xs)) (<= (car xs) (length (string->list x)))
                     (>= (car xs) 0) (char? (cadr xs)) (list->string (append (reverse (list-tail (reverse (string->list x))
                                                        (- (length (string->list x)) (car xs)))) (list (cadr xs))
                                                                                        (list-tail (string->list x) (car xs))))))))))

(define tests
  (list (test (ref '(1 2 3) 1) 2)
    (test (ref #(1 2 3) 1) 2)
    (test (ref "123" 1) #\2)
    (test (ref "123" 3) #f)
    (test (ref '(1 2 3) 1 0) '(1 0 2 3))
    (test (ref #(1 2 3) 1 0) #(1 0 2 3))
    (test (ref #(1 2 3) 1 #\0) #(1 #\0 2 3))
    (test (ref "123" 1 #\0) "1023")
    (test (ref "123" 1 0) #f)
    (test (ref "123" 3 #\4) "1234")
    (test (ref "123" 5 #\4) #f)))

(run-tests tests)