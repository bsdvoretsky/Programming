(define (simplify expr)
  (if (or (symbol? expr) (number? expr))
      expr
      (let ((op (car expr))
            (e1 (cadr expr))
            (e2 (cddr expr)))
        (cond ((equal? op '+)
               (cond ((equal? e1 0)
                      (simplify e2))
                     ((equal? e2 0)
                      (simplify e1))
                     (else `(+ ,(simplify e1) ,(simplify e2)))))
              ((equal? op '*)
               (cond ((or (equal? e1 0) (equal? (car e2) 0))
                      0)
                     ((equal? e1 1) (simplify e2))
                     ((equal? e2 1) (simplify e1))
                     (else `(* ,(simplify e1) ,(simplify e2)))))
              ((equal? op '-)
               (cond ((equal? e1 0)
                      `(* -1 ,(simplify (car e2))))
                     ((equal? (car e2) 0) (simplify e1))
                     (else `(- ,(simplify e1) ,(simplify e2)))))
              ((equal? op '/)
               (if (equal? e1 0)
                   0
                   `(/ ,(simplify e1) ,(simplify e2))))))))

(define (derivative expr)
  (cond ((or (number? expr) (equal? expr 'e)) 0)
        ((symbol? expr) 1)
        ((equal? expr '(- x)) -1)
        ((equal? (car expr) 'exp)
         `(* (exp ,(cadr expr)) ,(derivative (cadr expr))))
        (else (let ((op (car expr))
                    (e1 (cadr expr))
                    (e2 (cddr expr)))
                (cond ((equal? op '*)
                       (if (= (length e2) 1)
                           `(+ (* ,e1 ,(derivative (car e2))) (* ,(derivative e1) ,(car e2)))
                           `(+ (* ,e1 ,(derivative `(* ,(car e2) ,@(cdr e2))))
                               (* ,(derivative e1) (* ,@e2)))))
                      ((equal? op '+)
                       (if (= (length e2) 1)
                           `(+ ,(derivative e1) ,(derivative (car e2)))
                           `(+ ,(derivative e1) ,(derivative `(+ ,(car e2) ,@(cdr e2))))))
                      ((equal? op '-)
                       (if (= (length e2) 1)
                           `(- ,(derivative e1) ,(derivative (car e2)))
                           `(- ,(derivative e1) ,(derivative `(- ,(car e2) ,@(cdr e2))))))
                      ((equal? op 'sin)
                       `(* ,(derivative e1) (cos ,e1)))
                      ((equal? op 'cos)
                       `(* ,(derivative e1) (* (sin ,e1) -1)))
                      ((equal? op 'log)
                       `(/ ,(derivative e1) ,e1))
                      ((equal? op 'expt)
                       `(* ,(derivative `(* ,(car e2) (log ,e1))) (expt ,e1 ,(car e2))))
                      ((equal? op '/)
                       `(/ (- (* ,(derivative e1) ,(car e2)) (* ,e1 ,(derivative (car e2)))) (expt ,(car e2) 2)))
                      )))))
