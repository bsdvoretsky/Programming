(load "unit-test.scm")

(define (simplify exp)
  (let ((op (car exp))
        (e1 (cadr exp))
        (e2 (cddr exp)))
    (cond ((equal? op '+)
           (cond ((equal? e1 0)
                  (car e2))
                 ((equal? (car e2) 0)
                  e1)
                 (else exp)))
          ((equal? op '*)
           (cond ((or (equal? e1 0) (equal? (car e2) 0))
                  0)
                 ((equal? e1 1) (car e2))
                 ((equal? (car e2) 1) e1)
                 (else exp)))
          ((equal? op '-)
           (cond ((equal? e1 0)
                  `(* -1 ,(car e2)))
                 ((equal? (car e2) 0) e1)
                 (else exp)))
          ((equal? op '/)
           (if (equal? e1 0)
               0
               exp)))))

(define (derivative exp)
  (cond ((or (number? exp) (equal? exp 'e)) 0)
        ((symbol? exp)
         (if (equal? exp '-x)
             -1
             1))
        (else (let ((op (car exp))
                    (e1 (cadr exp))
                    (e2 (cddr exp)))
                (cond ((equal? op '*)
                       (if (= (length e2) 1)
                           (simplify `(+ ,(simplify `(* ,e1 ,(derivative (car e2)))) ,(simplify `(* ,(derivative e1) ,(car e2)))))
                           (simplify `(+ ,(simplify `(* ,e1 ,(derivative `(* ,(car e2) ,@(cdr e2)))))
                                         ,(simplify `(* ,(derivative e1) (* ,@e2)))))))
                      ((equal? op '+)
                       (if (= (length e2) 1)
                           (simplify `(+ ,(derivative e1) ,(derivative (car e2))))
                           (simplify `(+ ,(derivative e1) ,(derivative `(+ ,(car e2) ,@(cdr e2)))))))
                      ((equal? op '-)
                       (if (= (length e2) 1)
                           (simplify `(- ,(derivative e1) ,(derivative (car e2))))
                           (simplify `(- ,(derivative e1) ,(derivative `(- ,(car e2) ,@(cdr e2)))))))
                      ((equal? op 'sin)
                       (simplify `(* ,(derivative e1) (cos ,e1))))
                      ((equal? op 'cos)
                       (simplify `(* ,(derivative e1) (* (sin ,e1) -1))))
                      ((equal? op 'log)
                       (simplify `(/ ,(derivative e1) ,e1)))
                      ((equal? op 'expt)
                       (simplify `(* ,(derivative `(* ,(car e2) (log ,e1))) (expt ,e1 ,(car e2)))))
                      ((equal? op '/)
                       `(/ ,(simplify `(- ,(simplify `(* ,(derivative `,e1) ,(car e2))) ,(simplify `(* ,e1 ,(derivative `,(car e2)))))) (expt ,(car e2) 2)))
                      )))))

(define tests
  (list (test (derivative '2) 0)
        (test (derivative 'x) 1)
        (test (derivative '-x) -1)
        (test (derivative '(* 1 x)) 1)
        (test (derivative '(* -1 x)) -1)
        (test (derivative '(* -4 x)) -4)
        (test (derivative '(* 10 x)) 10)
        (test (derivative '(- (* 2 x) 3)) '2)
        (test (derivative '(expt x 10)) '(* (* 10 (/ 1 x)) (expt x 10)))
        (test (derivative '(* 2 (expt x 5))) '(* 2 (* (* 5 (/ 1 x)) (expt x 5))))
        (test (derivative '(expt x -2)) '(* (* -2 (/ 1 x)) (expt x -2)))
        (test (derivative '(expt 5 x)) '(* (log 5) (expt 5 x)))
        (test (derivative '(cos x)) '(* (sin x) -1))
        (test (derivative '(sin x)) '(cos x))
        (test (derivative '(expt e x)) '(* (log e) (expt e x)))
        (test (derivative '(* 2 (expt e x))) '(* 2 (* (log e) (expt e x))))
        (test (derivative '(* 2 (expt e (* 2 x)))) '(* 2 (* (* 2 (log e)) (expt e (* 2 x)))))
        (test (derivative '(log x)) '(/ 1 x))
        (test (derivative '(* 3 (log x))) '(* 3 (/ 1 x)))
        (test (derivative '(+ (expt x 3) (expt x 2))) '(+ (* (* 3 (/ 1 x)) (expt x 3)) (* (* 2 (/ 1 x)) (expt x 2))))
        (test (derivative '(- (* 2 (expt x 3)) (* 2 (expt x 2)))) '(- (* 2 (* (* 3 (/ 1 x)) (expt x 3))) (* 2 (* (* 2 (/ 1 x)) (expt x 2)))))
        (test (derivative '(/ 3 x)) '(/ (* -1 3) (expt x 2)))
        (test (derivative '(/ 3 (* 2 (expt x 2)))) '(/ (* -1 (* 3 (* 2 (* (* 2 (/ 1 x)) (expt x 2))))) (expt (* 2 (expt x 2)) 2)))
        (test (derivative '(* 2 (sin x) (cos x))) '(* 2 (+ (* (sin x) (* (sin x) -1)) (* (cos x) (cos x)))))
        (test (derivative '(* 2 (expt e x) (sin x) (cos x))) '(* 2 (+ (* (expt e x) (+ (* (sin x) (* (sin x) -1)) (* (cos x) (cos x)))) (* (* (log e) (expt e x)) (* (sin x) (cos x))))))
        (test (derivative '(sin (* 2 x))) '(* 2 (cos (* 2 x))))
        (test (derivative '(cos (* 2 (expt x 2)))) '(* (* 2 (* (* 2 (/ 1 x)) (expt x 2))) (* (sin (* 2 (expt x 2))) -1)))
        (test (derivative '(sin (log (expt x 2)))) '(* (/ (* (* 2 (/ 1 x)) (expt x 2)) (expt x 2)) (cos (log (expt x 2)))))
        (test (derivative '(+ (sin (* 2 x)) (cos (* 2 (expt x 2))))) '(+ (* 2 (cos (* 2 x))) (* (* 2 (* (* 2 (/ 1 x)) (expt x 2))) (* (sin (* 2 (expt x 2))) -1))))
        (test (derivative '(* (sin (* 2 x)) (cos (* 2 (expt x 2))))) '(+ (* (sin (* 2 x)) (* (* 2 (* (* 2 (/ 1 x)) (expt x 2))) (* (sin (* 2 (expt x 2))) -1))) (* (* 2 (cos (* 2 x))) (cos (* 2 (expt x 2))))))
        ))

(run-tests tests)
