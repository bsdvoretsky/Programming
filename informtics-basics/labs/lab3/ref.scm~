

(define (ref x . xs)
  (cond ((= (length xs) 1)
         (cond ((vector? x)
                (and (integer? (car xs)) (< (car xs) (vector-length x))
                     (>= (car xs) 0) (vector-ref x (car xs))))
               ((list? x)
                (and (integer? (car xs)) (< (car xs) (length x))
                     (>= (car xs) 0) (vector-ref (list->vector x) (car xs))))
               ((string? x)
                (and (integer? (car xs)) (< (car xs) (length (string->list x)))
                     (>= (car xs) 0) (vector-ref (list->vector (string->list x)) (car xs))))))))